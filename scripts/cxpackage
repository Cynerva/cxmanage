#!/usr/bin/env python

# Copyright (c) 2012, Calxeda Inc.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# * Neither the name of Calxeda Inc. nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.


"""Command line tool for creating a Calxeda firmware package"""

import argparse
import os
import sys

from cxmanage.firmware_package import FirmwarePackage

def build_parser():
    """setup the argparse parser"""
    parser = argparse.ArgumentParser(
            description='Calxeda firmware package creator')
    subparsers = parser.add_subparsers()

    #info command
    info = subparsers.add_parser('info', help='Display package info')
    info.set_defaults(func=info_command)

    #add command
    add = subparsers.add_parser('add',
            help='Create or add to a firmware package')
    add.add_argument('image_type', metavar='IMAGE_TYPE',
            help='type of image to update', type=lambda string: string.upper(),
            choices = list(sorted([
                'DEL',
                'DEL1',
                'S2_ELF',
                'SOC_ELF',
                'A9_UEFI',
                'A9_UBOOT',
                'A9_EXEC',
                'A9_ELF',
                'SOCDATA',
                'DTB',
                'CDB',
                'UBOOTENV',
                'SEL',
                'BOOT_LOG',
                'UEFI_ENV',
                'DIAG_ELF'
            ])))
    simg_args = add.add_mutually_exclusive_group()
    simg_args.add_argument('--force-simg', help='Force addition of SIMG header',
            default=False, action='store_true')
    simg_args.add_argument('--skip-simg', help='Skip addition of SIMG header',
            default=False, action='store_true')
    add.add_argument('-v', '--priority', help='Priority for SIMG header',
            default=None, type=int)
    add.add_argument('-d', '--daddr', help='Destination address for SIMG',
            default=None, type=lambda x : int(x, 16))
    add.add_argument('--skip-crc32', help='Skip crc32 calculation for SIMG',
            default=False, action='store_true')
    add.add_argument('--version', help='Version for SIMG header', default=None)
    add.add_argument('filename', help='image path')
    add.set_defaults(func=add_command)

    parser.add_argument('package', help='target package')

    return parser

def validate_args(args):
    """ Bail out if the arguments don't make sense"""
    if args.func == add_command:
        if args.skip_simg and args.priority:
            sys.exit('Invalid argument --priority when supplied with --skip-simg')
        if args.skip_simg and args.daddr:
            sys.exit('Invalid argument --daddr when supplied with --skip-simg')
        if args.skip_simg and args.skip_crc32:
            sys.exit('Invalid argument --skip-crc32 when supplied with --skip-simg')
        if args.skip_simg and args.version:
            sys.exit('Invalid argument --version when supplied with --skip-simg')

def main():
    """Get args and go"""
    parser = build_parser()
    args = parser.parse_args()
    validate_args(args)

    sys.exit(args.func(args))

def info_command(args):
    """ Get package info """
    package = FirmwarePackage(args.package)
    for image in package.images:
        print "[%s]" % os.path.basename(image.filename)
        print "Type       : %s" % image.type
        if image.simg != None:
            print "Simg       : %s" % image.simg
        if image.daddr != None:
            print "Daddr      : %x" % image.daddr
        if image.version != None:
            print "Version    : %s" % image.version
        if image.skip_crc32 != False:
            print "Skip CRC32 : True"
        print

def add_command(args):
    """ Create or add to a firmware package """
    if os.path.exists(args.package):
        package = FirmwarePackage(args.package)
    else:
        package = FirmwarePackage()

    simg = None
    if args.force_simg:
        simg = False
    elif args.skip_simg:
        simg = True

    image = Image(args.filename, args.image_type, simg, args.priority,
            args.daddr, args.skip_crc32, args.version)
    package.images.append(image)
    controller.add_image(args.filename, args.image_type, simg, args.priority,
            args.daddr, args.skip_crc32, args.version)

    controller.save_package(args.package)

if __name__ == "__main__":
    main()
